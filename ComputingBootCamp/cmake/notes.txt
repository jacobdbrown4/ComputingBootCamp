CMake Tutorial

1. Pre-processing, linking, and compiling of alone

/////////////////////////////
// Pre-processor 
gcc -E -P main.cpp >> main.i
gcc -E -P my_file.cpp >> my_file.i

Show output and then clear

////////////////////////////////
// Compile to generate assembly
gcc -S main.cpp
gcc -S my_file.cpp


Show contents of main.s

///////////////////////////////////////////
// Assembly to create binary object file
as -o main.o main.s
as -o my_file.o my_file.s

Show contents of binary

///////////////////////////////////////////
// Link together
g++ -o my_program main.o my_file.o 

Generates executable.

// What is the difference between c (gcc) and c++ (g++)?
// The following command will cause a link error
// because of c++ libraries aren't linked
gcc -o my_program main.o my_file.o 


////////////////////////////////////////////
// Do it all at once
rm *.i *.o *.s
g++ -o my_program main.c my_file.c

You could run this command every time you change a file to re-build.
What does a Makefile buy you?


2. Why CMake?

- Generating a Makefile for large projects is tedious, time consuming, and brital.
- What if your compiler changes?
- What if you  move to another machine with a different operating system?
- What if you want to do something more complex (dynamicly linked libraries)?
- What if your large library has many different versions of libraries it could link against and you want to configure those things at compile time?

CMAKE!

Luckily, this general process is similar for almost every program/project.
CMake lets us specify the dependencies of a project and then it will automatically generate the make file for us.

3. CMake Example

